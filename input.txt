(def fs (require "fs"))
(def peg (require "pegjs"))
(def parser (.buildParser peg (.readFileSync fs "grammar.peg" "utf8")))
(def result (.parse parser (.readFileSync fs "input.txt" "utf8")))
(render result)
(defn stringify_str_elm [e]
  (if (== (typeof e) "string")
    (return (.stringify JSON e))
    (return (compile e))))
(defn compile [sexp]
  (if (== (typeof sexp) "string") (return sexp))
  (if (== (typeof sexp) "number") (return sexp))
  (if (== (typeof sexp) "boolean") (return sexp))
  (if (== (get (get sexp 0) 0) ".")
    (return (str (compile (get sexp 1))
                 (get sexp 0) "(" (.join (.map (.slice sexp 2) compile) ", ")))))

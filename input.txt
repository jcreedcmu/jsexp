(defmacro def (fn [sexp compile_env]
                (return (str "var " (get sexp 1) " = " (compile_env (get sexp 2))))))

(defmacro defn (fn [sexp compile_env]
     (return (str "function " (get sexp 1)
                  "("
                  (.join (.slice (get sexp 2) 1) ", ")
                  ") {\n"
                  (.join (.map (.slice sexp 3) compile_env) "\n")
                  "\n}"))))

(defmacro ==  (fn [sexp compile_env]
                (return (str (compile_env (get sexp 1)) " == " (compile_env (get sexp 2))))))

(defmacro set (fn [sexp compile_env]
     (return (str
              (compile_env (get sexp 1))
              "[" (compile_env (get sexp 2)) "] = "
              (compile_env (get sexp 3))))))

(defmacro when (fn [sexp]
                 (return (str "if (" (compile_env (get sexp 1)) ") {" (.join (.map (.slice sexp 2) compile_env) "\n") "}"))))

(defmacro map (fn [sexp] (return (str "{}"))))


(def fs (require "fs"))
(def peg (require "pegjs"))
(def parser (.buildParser peg (.readFileSync fs "grammar.peg" "utf8")))
(def result (.parse parser (.readFileSync fs "input.txt" "utf8")))
(render result)

(defn render [sexps]
  (def env {})
  (.forEach sexps (fn [sexp] (.log console (compile env sexp)))))

(defn stringify_str_elm [env e]
  (if (== (typeof e) "string")
    (return (.stringify JSON e))
    (return (compile env e))))

(defn compile [env sexp]
  (def compile_env (fn [sexp] (return (compile env sexp))))
  (if (== (typeof sexp) "string") (return sexp))
  (if (== (typeof sexp) "number") (return sexp))
  (if (get sexp 0)
    (if (== (get (get sexp 0) 0) ".")
      (return (str (compile_env (get sexp 1))
                   (get sexp 0)
                   "(" (.join (.map (.slice sexp 2) compile_env) ", ") ")"))))
  (def macro (get env (get sexp 0)))
  (when macro
    (return (compile_env (macro sexp compile_env))))
  (if (== (get sexp 0) "get")
    (return (str
             (compile_env (get sexp 1))
             "[" (compile_env (get sexp 2)) "]")))
  (when (== (get sexp 0) "defmacro")
    (set env (get sexp 1) (eval (str "(" (compile_env (get sexp 2)) ")")))
    (return ""))
  (if (== (get sexp 0) "if")
    (if (== (get sexp 3) null)
      (return (str "if (" (compile_env (get sexp 1)) ") {" (compile_env (get sexp 2)) "}"))
      (return (str "if (" (compile_env (get sexp 1)) ") {" (compile_env (get sexp 2)) "} else {"
                   (compile_env (get sexp 3)) "}"))))
  (if (== (get sexp 0) "str")
    (return (.join (.map (.slice sexp 1) (fn [exp] (return (stringify_str_elm env exp)))) " + ")))
  (if (== (get sexp 0) "fn")
    (return (str "function ("
                 (.join (.slice (get sexp 1) 1) ", ")
                 ") {\n"
                 (.join (.map (.slice sexp 2) compile_env) "\n")
                 "\n}")))
  (return (str (get sexp 0) "(" (.join (.map (.slice sexp 1) compile_env) ", ") ")")))

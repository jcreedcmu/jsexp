(def fs (require "fs"))
(def peg (require "pegjs"))
(def parser (.buildParser peg (.readFileSync fs "grammar.peg" "utf8")))
(def result (.parse parser (.readFileSync fs "input.txt" "utf8")))
(render result)

(defn render [sexps] (.forEach sexps (fn [sexp] (.log console (compile sexp)))))
(defn stringify_str_elm [e]
  (if (== (typeof e) "string")
    (return (.stringify JSON e))
    (return (compile e))))
(defn compile [sexp]
  (if (== (typeof sexp) "string") (return sexp))
  (if (== (typeof sexp) "number") (return sexp))
  (if (== (get (get sexp 0) 0) ".")
    (return (str (compile (get sexp 1))
                 (get sexp 0)
                 "(" (.join (.map (.slice sexp 2) compile) ", ") ")")))
  (if (== (get sexp 0) "get")
    (return (str
             (compile (get sexp 1))
             "[" (compile (get sexp 2)) "]")))
  (if (== (get sexp 0) "if")
    (if (== (get sexp 3) null)
      (return (str "if (" (compile (get sexp 1)) ") {" (compile (get sexp 2)) "}"))
      (return (str "if (" (compile (get sexp 1)) ") {" (compile (get sexp 2)) "} else {"
                   (compile (get sexp 3)) "}"))))
  (if (== (get sexp 0) "def")
    (return (str "var " (get sexp 1) " = " (compile (get sexp 2)))))
  (if (== (get sexp 0) "==")
    (return (str (compile (get sexp 1)) " == " (compile (get sexp 2)))))
  (if (== (get sexp 0) "str")
    (return (.join (.map (.slice sexp 1) stringify_str_elm) " + ")))
  (if (== (get sexp 0) "defn")
    (return (str "function " (get sexp 1)
                 "("
                 (.join (.slice (get sexp 2) 1) ", ")
                 ") {\n"
                 (.join (.map (.slice sexp 3) compile) "\n")
                 "\n}")))
  (if (== (get sexp 0) "fn")
    (return (str "function ("
                 (.join (.slice (get sexp 1) 1) ", ")
                 ") {\n"
                 (.join (.map (.slice sexp 2) compile) "\n")
                 "\n}")))
  (return (str (get sexp 0) "(" (.join (.map (.slice sexp 1) compile) ", ") ")")))

/* derived from JSON grammar in examples dir in peg.js */

start
  = ws value:value ws { return value; }

ws "whitespace" = [ \t\n\r]*

/* ----- 3. Values ----- */

value
  = false
  / nil
  / true
  / array / map / vec
  / number
  / string
  / symbol


false = "false" { return false; }
nil   = "nil"  { return null;  }
true  = "true"  { return true;  }
symbol = x:[a-zA-Z:-]+ { return x.join("") }


/* ----- 5. Arrays ----- */

values = ws
     vs:(
      first:value ws
      rest:(v:value ws { return v; })*
      { return [first].concat(rest); }
    )?
    { return vs !== null ? vs : []; }
array = '(' values:values ')' { return values }
map = '{' values:values '}' { return ["map", values]; }
vec = '[' values:values ']' { return ["vec", values]; }

/* ----- 6. Numbers ----- */

number "number"
  = minus? int frac? exp? { return parseFloat(text()); }

decimal_point = "."
digit1_9      = [1-9]
e             = [eE]
exp           = e (minus / plus)? DIGIT+
frac          = decimal_point DIGIT+
int           = zero / (digit1_9 DIGIT*)
minus         = "-"
plus          = "+"
zero          = "0"

/* ----- 7. Strings ----- */

string "string"
  = quotation_mark chars:char* quotation_mark { return ["str", chars.join("")]; }

char
  = unescaped
  / escape
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

escape         = "\\"
quotation_mark = '"'
unescaped      = [\x20-\x21\x23-\x5B\x5D-\u10FFFF]

/* ----- Core ABNF Rules ----- */

/* See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4627). */
DIGIT  = [0-9]
HEXDIG = [0-9a-f]i